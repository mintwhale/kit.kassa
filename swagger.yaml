swagger: '2.0'
info:
  title: API сервиса КИТ.КАССА
  description: Увеличьте средний чек за счет использования сервиса персональных рекомендаций КИТ.КАССА.
  version: '0.7.1'
host: {{ facade_host ~ ":" ~ facade_port }}
schemes:
  - http
  - https
basePath: /api/v1
produces:
  - application/json
consumes:
  - application/json

paths:
  /recommendations:
    post:
      summary: Получить рекомендации.
      description: |
        Выдает персональные рекомендации на основании списка товаров.
        Рекомендации отсортированы в порядке убывания вероятности.
      operationId: facade.app.post_recommendations
      parameters:
        - name: receipt
          in: body
          description: Информация о чеке.
          required: true
          schema:
            $ref: '#/definitions/ReceiptShort'
        - name: X-Evotor-Store-Uuid
          in: header
          description: Уникальный идентификатор (UUID, [RFC4122]) магазина.
          required: true
          type: string
          pattern: '^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$'
      responses:
        200:
          description: Рекомендованные товары.
          schema:
            type: object
            required:
              - id
              - recommendations
            properties:
              id:
                $ref: '#/definitions/RecommendationId'
              recommendations:
                $ref: '#/definitions/RecommendationsList'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        default:
          $ref: '#/responses/Unexpected'

  /receipt:
    post:
      summary: Сохранить историю продаж.
      description: |
        Позволяет накапливать историю продаж для дальнейшего автоматического улучшения качества рекомендаций.
      operationId: facade.app.save_receipts
      produces:
        - application/json
        - text/plain
      parameters:
        - name: receipts
          in: body
          description: История продаж.
          required: true
          schema:
            type: array
            uniqueItems: true
            minItems: 1
            maxItems: 1000
            items:
              $ref: '#/definitions/Receipt'
      responses:
        200:
          description: История сохранена.
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        default:
          $ref: '#/responses/Unexpected'

  /user/create:
    post:
      summary: Создать нового пользователя.
      description: |
        Регистрирует нового пользователя и возвращает его ключ API. Операция доступна только администраторам.
      operationId: facade.app.create_user
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: Пользователь зарегистрирован.
          schema:
            type: object
            required:
              - userUuid
              - token
            properties:
              userUuid:
                $ref: '#/definitions/UserUuid'
              token:
                $ref: '#/definitions/Token'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        default:
          $ref: '#/responses/Unexpected'

  /user/token:
    post:
      summary: Токен для доступа к данным.
      description: |
        Добавляет токен пользователя для доступа к данным. Операция доступна только администраторам.
      operationId: facade.app.add_service_token
      parameters:
        - name: data
          in: body
          required: true
          schema:
            description: Токен пользователя.
            type: object
            required:
              - userUuid
              - token
            properties:
              userUuid:
                $ref: '#/definitions/UserUuid'
              token:
                description: Токен пользователя для доступа к сервисы данных.
                type: string
                maxLength: 254
      responses:
        200:
          description: Токен добавлен.
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        default:
          $ref: '#/responses/Unexpected'

  /user/verify:
    post:
      summary: Верифицировать пользователя.
      description: |
        Проверяет существование пользователя и возвращает его ключ API. Операция доступна только администраторам.
      operationId: facade.app.verify_user
      parameters:
        - name: user
          in: body
          description: Данные пользователя.
          required: true
          schema:
            type: object
            required:
              - userUuid
            properties:
              userUuid:
                $ref: '#/definitions/UserUuid'
      responses:
        200:
          description: Пользователь существует.
          schema:
            type: object
            required:
              - userUuid
              - token
              - hasBilling
            properties:
              userUuid:
                $ref: '#/definitions/UserUuid'
              token:
                $ref: '#/definitions/Token'
              hasBilling:
                description: Активен ли аккаунт пользователя.
                type: boolean
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        default:
          $ref: '#/responses/Unexpected'

  /user/tariff:
    post:
      summary: Управление тарифом пользователя.
      description: |
        Позволяет активировать/деактивировать тариф пользователя. Операция доступна только администраторам.
      operationId: facade.app.tariff_user
      produces:
        - application/json
        - text/plain
      parameters:
        - name: tariff
          in: body
          required: true
          schema:
            $ref: '#/definitions/Tariff'
      responses:
        200:
          description: Тариф изменен.
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        default:
          $ref: '#/responses/Unexpected'
  /status:
    get:
      summary: Статус сервиса.
      description: |
        Статус сервиса.
      operationId: facade.app.status
      produces:
        - application/json
      responses:
        200:
          description: Ok.

responses:
  BadRequest:
    description: Ошибка в запросе.
    schema:
      $ref: '#/definitions/Error'

  Unauthorized:
    description: Запрос требует аутентификации.
    schema:
      $ref: '#/definitions/Error'

  Forbidden:
    description: Доступ запрещен.
    schema:
      $ref: '#/definitions/Error'

  NotFound:
    description: Документ не найден.
    schema:
      $ref: '#/definitions/Error'

  Unexpected:
    description: Непредвиденная ошибка.
    schema:
      $ref: '#/definitions/Error'

definitions:
  UserUuid:
    description: Уникальный идентификатор (UUID) пользователя.
    type: string
    pattern: '^[0-9]{2}-[0-9]{15}$'

  User:
    description: Данные пользователя.
    type: object
    required:
      - userUuid
      - email
    properties:
      userUuid:
        $ref: '#/definitions/UserUuid'
      email:
        description: Адрес электронной почты пользователя.
        type: string
        pattern: '^[a-zA-Z0-9._%+-]+@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}$'
        maxLength: 254

  Tariff:
    description: Данные тарифа.
    type: object
    required:
      - userUuid
    properties:
      userUuid:
        $ref: '#/definitions/UserUuid'
      tariffId:
        description: Код тарифа.
        type: string
        maxLength: 1024
      status:
        description: Тип операции.
        type: string
        enum:
          - ACTIVE
          - INACTIVE

  Token:
    description: Ключ API.
    type: string
    pattern: '^[a-zA-Z0-9]{64}$'

  Receipt:
    description: Детальная информация о чеке.
    type: object
    required:
      - uuid
      - deviceUuid
      - storeUuid
      - dateTime
      - items
    properties:
      uuid:
        description: Уникальный идентификатор (UUID) чека.
        type: string
        maxLength: 64
      deviceUuid:
        description: Уникальный идентификатор (UUID) терминала.
        type: string
        pattern: '^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$'
      storeUuid:
        description: Уникальный идентификатор (UUID) магазина.
        type: string
        pattern: '^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$'
      # TODO: Определить формат
      clientUuid:
        description: Уникальный идентификатор (UUID) клиента.
        type: [string, "null"]
        maxLength: 64
      dateTime:
        $ref: '#/definitions/DateTime'
      items:
        $ref: '#/definitions/ItemsList'
      extras:
        $ref: '#/definitions/Hits'

  DateTime:
    description: Локальная дата и время в формате [RFC3339].
    type: string
    format: date-time

  ItemsList:
    type: array
    description: Список товаров.
    items:
      $ref: '#/definitions/Item'
    minItems: 1
    maxItems: 100

  Item:
    description: Информация о товаре.
    type: object
    required:
      - uuid
      - name
      - itemType
      - quantity
    properties:
      uuid:
        description: Уникальный идентификатор (UUID) товара.
        type: string
        maxLength: 64
      name:
        description: Наименование товара.
        type: string
        maxLength: 1024
      itemType:
        description: Тип товара.
        type: string
        enum:
          - NORMAL
          - ALCOHOL_MARKED
          - ALCOHOL_NOT_MARKED
          - SERVICE
      barcode:
        # TODO: Определить формат
        description: Штриховой код товара.
        type: [string, "null"]
        maxLength: 1024
      quantity:
        description: Количество товара.
        type: number
        format: float
        minimum: 0
        exclusiveMinimum: true

  Hits:
    description: Продажи по рекомендации.
    type: object
    properties:
      recommendationUuid:
        $ref: '#/definitions/RecommendationId'
      items:
        $ref: '#/definitions/RecommendationsList'

  ReceiptShort:
    description: Краткая информация о чеке.
    type: object
    required:
      - dateTime
      - items
    properties:
      dateTime:
        $ref: '#/definitions/DateTime'
      items:
        $ref: '#/definitions/ItemsList'

  Recommendation:
    description: Рекомендованный товар (UUID).
    type: string

  RecommendationsList:
    type: array
    description: Список рекомендованных товаров.
    items:
      $ref: '#/definitions/Recommendation'
    minItems: 0
    maxItems: 100
    uniqueItems: true

  RecommendationId:
    description: Уникальный идентификатор (UUID) рекомендации.
    type: string
    pattern: '^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$'

  Error:
    description: Ошибка.
    type: object
    properties:
      type:
        description: Абсолютный URI [RFC3986], идентифицирующий тип ошибки.
        type: string
      title:
        description: Короткое, человекочитаемое описание ошибки.
        type: string
      status:
        description: Код статуса HTTP ([RFC7231], секция 6), сгенерированный сервером при возникновении ошибки.
        type: integer
        format: int32
        minimum: 100
      detail:
        description: Детальное, человекочитаемое описание ошибки.
        type: string
      instance:
        description: Абсолютный URI, идентифицирующий ошибку.
        type: string
    example:
      type: about:blank
      title: Not Found
      status: 404
      detail: The requested document was not found on the server.

securityDefinitions:
  api_key:
    description: Авторизация по ключу API.
    type: apiKey
    name: Authorization
    in: header

security:
  - api_key: []
